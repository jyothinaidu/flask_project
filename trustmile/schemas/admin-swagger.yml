 # Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "1.0"
  title: Trust Mile Admin Interface

  description: |
    Describes the API that allows administrative functions.
    Primarily dsigned to be used to allow the .NET website server to communicate with the python API backend

    ## correlationID
      This parameter is returned with every request.

      The intent is that the server side will generate a unique id for each request, and feature this ID in all logging that occurs.  This will allow us to very easily to resolve issues faced consumers of the API.  When questioned with 'Why didn't this work' or 'This isn't working correctly' - we can identify the request server-side and easily identify events on the server associated with that request.

      My intent is to generate a log/trace of every request

    ## security
      Requests will be secured with the X-admin-apiKey.  This will be a fixed secret shared key.

    ## logon / logoff / sessions
      There will be no logon or log off operations

host: 127.0.0.1:5001

schemes:
  - https

basePath: /admin
# Describe your paths here

produces:
  - application/json

consumes:
  - application/json


securityDefinitions:
  internalApiKey:
    type: apiKey
    in: header
    name: X-admin-apiKey



paths:
  /retailers:
    get:
      description: |
        returns basic details of all the retailers in the system
      security:
        - internalApiKey: []
      responses:
        '200':
          description: an array of all the retailers
          schema:
            properties:
              correlationID:
                type: string
              retailers:
                type: array
                items:
                  $ref: "#/definitions/Retailer"
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'

    post:
      description: |
        Adds a new retailer
      parameters:
        - name: Retailer
          in: body
          required: true
          schema:
            $ref: '#/definitions/Retailer'
      responses:
        '200':
          description: THe retailer was added
          schema:
            properties:
              correlationID:
                type: string
              retailer:
                $ref: "#/definitions/Retailer"
        '422':
          description: A retailer already exists for that Umbraco ID
          schema:
            properties:
              correlationID:
                type: string

  /retailers/{umbraco_id}:
    parameters:
      - name: umbraco_id
        in: path
        type: string
        required: true
    get:
      description: Returns the retailer specified
      responses:
        '200':
          description: Success
          schema:
            properties:
              correlationID:
                type: string
              retailer:
                $ref: "#/definitions/Retailer"
        '404':
          description: Not found
          schema:
            properties:
              correlationID:
                type: string
    put:
      description:  |
        Updates the retailer.
        if 'partialUpdate' is specified as true, only the fields in the Retailer object suppiled are updated.
        fields that are null are skipped

        if 'partialUpdate' is false, the retailer is replaced in it's entirity with the Retailer provided
      parameters:
        - name: RetailerUpdateRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/Retailer'
      responses:
        '200':
          description: success
          schema:
            properties:
              correlationID:
                type: string
        '400':
          description: The umbracoID in the suppiled retailer object does not match the umbracoID in the URL
        '404':
          description: Not found
          schema:
            properties:
              correlationID:
                type: string

  /neighbourSignup:
    get:
      description: |
        returns all neighbour signups
      security:
        - internalApiKey: []
      responses:
        '200':
          description: an array of all the neighbourSignups
          schema:
            properties:
              correlationID:
                type: string
              neighbourSignups:
                type: array
                items:
                  $ref: "#/definitions/NeighbourSignup"
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'

    post:
      description: |
        Adds a new neighbourSignup
      parameters:
        - name: NeighbourSignup
          in: body
          required: true
          schema:
            $ref: '#/definitions/NeighbourSignup'
      responses:
        '200':
          description: The neighbourSignup was added
          schema:
            properties:
              correlationID:
                type: string
              retailer:
                $ref: "#/definitions/NeighbourSignup"

  /promotion:
    post:
      description: Create a new promotion
      consumes:
        - multipart/form-data
      security:
        - internalApiKey: []
      parameters:
        - name: Promotion
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePromotion'

      responses:
        '200':
          description: The neighbourSignup was added
          schema:
            properties:
              correlationID:
                type: string
              promotionId:
                type: string
                format: uuid
        '404':
          description: Retailer not found
          schema:
            properties:
              correlationID:
                type: string

        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'

  /allNeighbourLocations:
    get:
      description: get all neighbour locations
      consumes:
        - multipart/json
      security:
        - internalApiKey: []

      responses:
        '200':
          description: The neighbourSignup was added
          schema:
            $ref: '#/definitions/NeighbourLocations'
        '404':
          description: Not found
          schema:
            properties:
              correlationID:
                type: string

        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'


  /seal/{seal_id}:
    parameters:
      - name: seal_id
        in: path
        type: string
        required: true
    get:
      description: information  needed about a retailer to display the seal on a website
      security:
        - internalApiKey: []
      responses:
        '200':
          description: the seal information
          schema:
            properties:
              correlationID:
                type: string
              seal_info:
                $ref: "#/definitions/SealInfo"
        '404':
          description: seal id not found
          schema:
            properties:
              correlationID:
                type: string

        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'

  /seal/{seal_id}/seal-audit:
    parameters:
      - name: seal_id
        in: path
        type: string
        required: true
    get:
      description: information  needed about a retailer to display the seal popup.  Similar results as /account/seal-audit in the retailer api
      security:
        - internalApiKey: []
      responses:
        '200':
          description: seal audit answers
          schema:
            properties:
              correlationID:
                type: string
              seal_enabled:
                type: boolean
              seal_audits:
                type: array
                items:
                  $ref: '#/definitions/RetailerSealAudit'
        '404':
          description: seal id not found
          schema:
            properties:
              correlationID:
                type: string
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/401'


definitions:

  NeighbourLocations:
    type: object
    properties:
      userLocations:
        type: array
        items:
          $ref: '#/definitions/NeighbourLocation'


  NeighbourLocation:
    type: object
    properties:
      lat:
        type: string
      lng:
        type: string
      name:
        type: string


  CreatePromotion:
    type: object
    properties:
      promotionDestinationUrl:
        type: string
      retailerId:
        type: string
        format: uuid
      promotionImages:
        type: array
        items:
          $ref: '#/definitions/PromotionImage'

  PromotionImage:
    type: object
    properties:
      name:
        type: string
      imageFileData:
        type: string

  401:
    type: object
    required:
      - correlationID
    description: Not authorized.  Either the authorization key was missing or not present
    properties:
      correlationID:
        type: string
      reason:
        type: string

  Retailer:
    type: object
    properties:
      website_name:
        type: string
      website_url:
        type: string
      umbraco_id:
        type: string
      id:
        type: string
      courier_mappings:
        type: array
        items:
          $ref: '#/definitions/CourierMapping'
      email_integration_configuration:
        $ref: '#/definitions/EmailIntegrationConfiguration'

  CourierMapping:
    type: object
    properties:
      sourceText:
        type: string
      courierName:
        type: string

  EmailIntegrationConfiguration:
    type: object
    properties:
      from_email_addresses:
        type: array
        items:
          type: string
      parsing_set:
        type: array
        items:
          $ref: '#/definitions/EmailParser'

  EmailParser:
    type: object
    properties:
      start:
        $ref: '#/definitions/EmailExtractor'
      stop:
        $ref: '#/definitions/EmailExtractor'
      repeat:
        type: boolean
      extractors:
        type: array
        items:
          $ref: '#/definitions/EmailExtractor'


  EmailExtractor:
    type: object
    properties:
      start:
        type: string
      capture:
        type: string
      end:
        type: string
      item:
        type: string
      repeat:
        type: boolean

  NeighbourSignup:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      emailAddress:
        type: string
      addressLine1:
        type: string
      addressLine2:
        type: string
      suburb:
        type: string
      state:
        type: string
      postcode:
        type: string
      phoneNumber:
        type: string
      over18:
        type: boolean
      hasIPhone:
        type: boolean
      workStatus:
        type: string


  SealInfo:
    type: object
    properties:
      website_name:
        type: string
      website_url:
        type: string
      seal_enabled:
        type: boolean


  RetailerSealAudit:
    type: object
    description: Gets and sets seal audit information
    properties:
      question_code:
        type: string
      question_text:
        type: string
      answer:
        type: boolean
      additional_information:
        type: string
      additional_information_approved:
        type: boolean